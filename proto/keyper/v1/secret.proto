syntax = "proto3";

package keyper.v1;

import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";

option go_package = "github.com/RomanAgaltsev/keyper/pkg/keyper/v1;keyper";

// SecretType contains a list of secrets types.
enum SecretType {
    // SECRET_TYPE_UNSPECIFIED is a default secret type.
    SECRET_TYPE_UNSPECIFIED = 0;

    // SECRET_TYPE_CREDENTIALS specifies a secret with user credentials as data.
    SECRET_TYPE_CREDENTIALS = 1;

    // SECRET_TYPE_TEXT specifies a secret with arbitrary text as data.
    SECRET_TYPE_TEXT = 2;

    // SECRET_TYPE_BINARY specifies a secret with binary data.
    SECRET_TYPE_BINARY = 3;

    // SECRET_TYPE_TEXT specifies a secret with bank card as data.
    SECRET_TYPE_CARD = 4;
}

// Secret contains secrets info, metadata and data.
message Secret {
    // Secrets identifier (uuid).
    optional string id = 1 [
        (buf.validate.field).string.uuid = true
    ];

    // Secrets name.
    string name = 2 [
        (buf.validate.field).required = true,
        (buf.validate.field).string.min_len = 1,
        (buf.validate.field).string.max_len = 100
    ];

    // Secrets type.
    SecretType type = 3 [
        (buf.validate.field).required = true        
    ];

    // Secrets metadata.
    bytes metadata = 4 [
        (buf.validate.field).required = true,
        (buf.validate.field).bytes.min_len = 1        
    ];

    // Secrets data.
    optional bytes data = 5 [
        (buf.validate.field).bytes.min_len = 1        
    ];

    // Secrets arbitrary description or comment.
    optional string comment = 6;

    // Secrets creation time.
    optional google.protobuf.Timestamp created_at = 7;

    // Secrets modification time.
    optional google.protobuf.Timestamp updated_at = 8;
}

// CreateSecretV1Request contains a new secret to store in the service.
message CreateSecretV1Request {
    // A secret to store.
    Secret secret = 1 [
        (buf.validate.field).required = true
    ];
}

// CreateSecretV1Response is received in response to a CreateSecretV1 rpc.
//
// It contains a result of secret creation - secrets identifier or creation error.
message CreateSecretV1Response {
    // CreateSecretResult contains a result of secrets creation.
    message CreateSecretResult {
        // Secrets identifier (uuid).
        optional string id = 1 [
            (buf.validate.field).string.uuid = true
        ];

        // Creation error description.
        optional string error = 2;
    }

    // Result of secret creation.
    CreateSecretResult result = 1 [
        (buf.validate.field).required = true
    ];
}

 // Secrets update result.
 message UpdateSecretResult {
    // Update error description.
    optional string error = 1;
}

// UpdateSecretV1Request contains a secret to update in the service storage.
message UpdateSecretV1Request {
    // Secret to update.
    Secret secret = 1 [
        (buf.validate.field).required = true
    ];
}

// UpdateSecretV1Response is received in response to a UpdateSecretV1 rpc.
//
// It contains a secrets update result.
message UpdateSecretV1Response {
    // Secrets update result.
    UpdateSecretResult result = 1 [
        (buf.validate.field).required = true
    ];
}

// UpdateSecretsDataV1Request contains a secrets data to update in the service storage.
message UpdateSecretsDataV1Request {
    message UpdateSecretsData {
        // Secrets identifier (uuid).
        string id = 1 [
            (buf.validate.field).required = true,
            (buf.validate.field).string.uuid = true
        ];

        // Secrets data to update.
        bytes data = 2 [
            (buf.validate.field).required = true,
            (buf.validate.field).bytes.min_len = 1
        ];
    }
    
    // Secrets data.
    UpdateSecretsData update_data = 1 [
        (buf.validate.field).required = true
    ];
}

// UpdateSecretsDataV1Response is received in response to a UpdateSecretsDataV1 rpc.
//
// It contains a secrets data update result.
message UpdateSecretsDataV1Response {
    // Secrets update result.
    UpdateSecretResult result = 1 [
        (buf.validate.field).required = true
    ];
}

// GetSecretV1Request contains an identifier of a secret to return.
message GetSecretV1Request {
    // Secrets identifier (uuid).
    string id = 1 [
        (buf.validate.field).required = true,
        (buf.validate.field).string.uuid = true
    ];
}

// GetSecretV1Response is received in response to a GetSecretV1 rpc.
//
// It contains a secret with identifier from request or an error.
message GetSecretV1Response {
    // GetSecretResult contains a result of secrets search.
    message GetSecretResult {
        // Secret with identifier from request.
        optional Secret secret = 1;

        // Error description.
        optional string error = 2;
    }

    // Secrets search result.
    GetSecretResult result = 1 [
        (buf.validate.field).required = true
    ];
}

// GetSecretsDataV1Request contains an identifier of a secrets data to return.
message GetSecretsDataV1Request {
    // Secrets identifier (uuid).
    string id = 1 [
        (buf.validate.field).required = true,
        (buf.validate.field).string.uuid = true
    ];
}

// GetSecretsDataV1Response is received in response to a GetSecretsDataV1 rpc.
//
// It contains a secrets data with identifier from request or an error.
message GetSecretsDataV1Response {
     // GetSecretsDataResult contains a data of secrets search.
     message GetSecretsDataResult {
        // Secrets data to return.
        optional bytes data = 1 [
            (buf.validate.field).bytes.min_len = 1
        ];

        // Error description.
        optional string error = 2;
    }

    // Secrets getting result.
    GetSecretsDataResult result = 1 [
        (buf.validate.field).required = true
    ];
}

// ListSecretsV1Response is received in response to a ListSecretsV1 rpc.
//
// It contains a list of found secrets.
message ListSecretsV1Response {
    // A list of secrets.
    repeated Secret secret = 1;
}

// DeleteSecretV1Request contains an identifier of the secret to delete from the service storage.
message DeleteSecretV1Request {
    // Secrets identifier (uuid).
    string id = 1 [
        (buf.validate.field).required = true,
        (buf.validate.field).string.uuid = true
    ];
}

// DeleteSecretV1Response is received in response to a DeleteSecretV1 rpc.
//
// It contains a secrets delete result.
message DeleteSecretV1Response {
    // Secret delete result.
    message DeleteSecretResult {
        // Delete error description.
        optional string error = 1;
    }

    // Secrets deletion result.
    DeleteSecretResult result = 1 [
        (buf.validate.field).required = true
    ];
}