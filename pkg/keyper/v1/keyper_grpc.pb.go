// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: keyper/v1/keyper.proto

package keyper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_RegisterUserV1_FullMethodName = "/keyper.v1.UserService/RegisterUserV1"
	UserService_LoginUserV1_FullMethodName    = "/keyper.v1.UserService/LoginUserV1"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The user service definition.
type UserServiceClient interface {
	// Registers new user.
	RegisterUserV1(ctx context.Context, in *RegisterUserV1Request, opts ...grpc.CallOption) (*RegisterUserV1Response, error)
	// Logins existed user.
	LoginUserV1(ctx context.Context, in *LoginUserV1Request, opts ...grpc.CallOption) (*LoginUserV1Response, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) RegisterUserV1(ctx context.Context, in *RegisterUserV1Request, opts ...grpc.CallOption) (*RegisterUserV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserV1Response)
	err := c.cc.Invoke(ctx, UserService_RegisterUserV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginUserV1(ctx context.Context, in *LoginUserV1Request, opts ...grpc.CallOption) (*LoginUserV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserV1Response)
	err := c.cc.Invoke(ctx, UserService_LoginUserV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// The user service definition.
type UserServiceServer interface {
	// Registers new user.
	RegisterUserV1(context.Context, *RegisterUserV1Request) (*RegisterUserV1Response, error)
	// Logins existed user.
	LoginUserV1(context.Context, *LoginUserV1Request) (*LoginUserV1Response, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) RegisterUserV1(context.Context, *RegisterUserV1Request) (*RegisterUserV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserV1 not implemented")
}
func (UnimplementedUserServiceServer) LoginUserV1(context.Context, *LoginUserV1Request) (*LoginUserV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUserV1 not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_RegisterUserV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterUserV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterUserV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterUserV1(ctx, req.(*RegisterUserV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginUserV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginUserV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LoginUserV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginUserV1(ctx, req.(*LoginUserV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keyper.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUserV1",
			Handler:    _UserService_RegisterUserV1_Handler,
		},
		{
			MethodName: "LoginUserV1",
			Handler:    _UserService_LoginUserV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keyper/v1/keyper.proto",
}

const (
	SecretService_CreateSecretV1_FullMethodName = "/keyper.v1.SecretService/CreateSecretV1"
	SecretService_GetSecretV1_FullMethodName    = "/keyper.v1.SecretService/GetSecretV1"
	SecretService_ListSecretsV1_FullMethodName  = "/keyper.v1.SecretService/ListSecretsV1"
	SecretService_UpdateSecretV1_FullMethodName = "/keyper.v1.SecretService/UpdateSecretV1"
	SecretService_DeleteSecretV1_FullMethodName = "/keyper.v1.SecretService/DeleteSecretV1"
)

// SecretServiceClient is the client API for SecretService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The secret service definition.
type SecretServiceClient interface {
	// Creates new secret.
	CreateSecretV1(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateSecretV1Request, CreateSecretV1Response], error)
	// Returns existed secret.
	GetSecretV1(ctx context.Context, in *GetSecretV1Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSecretV1Response], error)
	// Returns a list of existed secrets.
	ListSecretsV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListSecretsV1Response], error)
	// Updates existed secret.
	UpdateSecretV1(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateSecretV1Request, UpdateSecretV1Response], error)
	// Deletes existed secret.
	DeleteSecretV1(ctx context.Context, in *DeleteSecretV1Request, opts ...grpc.CallOption) (*DeleteSecretV1Response, error)
}

type secretServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretServiceClient(cc grpc.ClientConnInterface) SecretServiceClient {
	return &secretServiceClient{cc}
}

func (c *secretServiceClient) CreateSecretV1(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateSecretV1Request, CreateSecretV1Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecretService_ServiceDesc.Streams[0], SecretService_CreateSecretV1_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateSecretV1Request, CreateSecretV1Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_CreateSecretV1Client = grpc.ClientStreamingClient[CreateSecretV1Request, CreateSecretV1Response]

func (c *secretServiceClient) GetSecretV1(ctx context.Context, in *GetSecretV1Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetSecretV1Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecretService_ServiceDesc.Streams[1], SecretService_GetSecretV1_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetSecretV1Request, GetSecretV1Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_GetSecretV1Client = grpc.ServerStreamingClient[GetSecretV1Response]

func (c *secretServiceClient) ListSecretsV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListSecretsV1Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecretService_ServiceDesc.Streams[2], SecretService_ListSecretsV1_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, ListSecretsV1Response]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_ListSecretsV1Client = grpc.ServerStreamingClient[ListSecretsV1Response]

func (c *secretServiceClient) UpdateSecretV1(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateSecretV1Request, UpdateSecretV1Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecretService_ServiceDesc.Streams[3], SecretService_UpdateSecretV1_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateSecretV1Request, UpdateSecretV1Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_UpdateSecretV1Client = grpc.ClientStreamingClient[UpdateSecretV1Request, UpdateSecretV1Response]

func (c *secretServiceClient) DeleteSecretV1(ctx context.Context, in *DeleteSecretV1Request, opts ...grpc.CallOption) (*DeleteSecretV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSecretV1Response)
	err := c.cc.Invoke(ctx, SecretService_DeleteSecretV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretServiceServer is the server API for SecretService service.
// All implementations must embed UnimplementedSecretServiceServer
// for forward compatibility.
//
// The secret service definition.
type SecretServiceServer interface {
	// Creates new secret.
	CreateSecretV1(grpc.ClientStreamingServer[CreateSecretV1Request, CreateSecretV1Response]) error
	// Returns existed secret.
	GetSecretV1(*GetSecretV1Request, grpc.ServerStreamingServer[GetSecretV1Response]) error
	// Returns a list of existed secrets.
	ListSecretsV1(*emptypb.Empty, grpc.ServerStreamingServer[ListSecretsV1Response]) error
	// Updates existed secret.
	UpdateSecretV1(grpc.ClientStreamingServer[UpdateSecretV1Request, UpdateSecretV1Response]) error
	// Deletes existed secret.
	DeleteSecretV1(context.Context, *DeleteSecretV1Request) (*DeleteSecretV1Response, error)
	mustEmbedUnimplementedSecretServiceServer()
}

// UnimplementedSecretServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretServiceServer struct{}

func (UnimplementedSecretServiceServer) CreateSecretV1(grpc.ClientStreamingServer[CreateSecretV1Request, CreateSecretV1Response]) error {
	return status.Errorf(codes.Unimplemented, "method CreateSecretV1 not implemented")
}
func (UnimplementedSecretServiceServer) GetSecretV1(*GetSecretV1Request, grpc.ServerStreamingServer[GetSecretV1Response]) error {
	return status.Errorf(codes.Unimplemented, "method GetSecretV1 not implemented")
}
func (UnimplementedSecretServiceServer) ListSecretsV1(*emptypb.Empty, grpc.ServerStreamingServer[ListSecretsV1Response]) error {
	return status.Errorf(codes.Unimplemented, "method ListSecretsV1 not implemented")
}
func (UnimplementedSecretServiceServer) UpdateSecretV1(grpc.ClientStreamingServer[UpdateSecretV1Request, UpdateSecretV1Response]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateSecretV1 not implemented")
}
func (UnimplementedSecretServiceServer) DeleteSecretV1(context.Context, *DeleteSecretV1Request) (*DeleteSecretV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecretV1 not implemented")
}
func (UnimplementedSecretServiceServer) mustEmbedUnimplementedSecretServiceServer() {}
func (UnimplementedSecretServiceServer) testEmbeddedByValue()                       {}

// UnsafeSecretServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretServiceServer will
// result in compilation errors.
type UnsafeSecretServiceServer interface {
	mustEmbedUnimplementedSecretServiceServer()
}

func RegisterSecretServiceServer(s grpc.ServiceRegistrar, srv SecretServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecretServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretService_ServiceDesc, srv)
}

func _SecretService_CreateSecretV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SecretServiceServer).CreateSecretV1(&grpc.GenericServerStream[CreateSecretV1Request, CreateSecretV1Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_CreateSecretV1Server = grpc.ClientStreamingServer[CreateSecretV1Request, CreateSecretV1Response]

func _SecretService_GetSecretV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSecretV1Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecretServiceServer).GetSecretV1(m, &grpc.GenericServerStream[GetSecretV1Request, GetSecretV1Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_GetSecretV1Server = grpc.ServerStreamingServer[GetSecretV1Response]

func _SecretService_ListSecretsV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecretServiceServer).ListSecretsV1(m, &grpc.GenericServerStream[emptypb.Empty, ListSecretsV1Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_ListSecretsV1Server = grpc.ServerStreamingServer[ListSecretsV1Response]

func _SecretService_UpdateSecretV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SecretServiceServer).UpdateSecretV1(&grpc.GenericServerStream[UpdateSecretV1Request, UpdateSecretV1Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecretService_UpdateSecretV1Server = grpc.ClientStreamingServer[UpdateSecretV1Request, UpdateSecretV1Response]

func _SecretService_DeleteSecretV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServiceServer).DeleteSecretV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretService_DeleteSecretV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServiceServer).DeleteSecretV1(ctx, req.(*DeleteSecretV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretService_ServiceDesc is the grpc.ServiceDesc for SecretService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keyper.v1.SecretService",
	HandlerType: (*SecretServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteSecretV1",
			Handler:    _SecretService_DeleteSecretV1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateSecretV1",
			Handler:       _SecretService_CreateSecretV1_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetSecretV1",
			Handler:       _SecretService_GetSecretV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSecretsV1",
			Handler:       _SecretService_ListSecretsV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateSecretV1",
			Handler:       _SecretService_UpdateSecretV1_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "keyper/v1/keyper.proto",
}
