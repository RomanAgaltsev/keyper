// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSecret = `-- name: CreateSecret :one
INSERT INTO secrets (name, type, metadata, data, comment, user_id)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id
`

type CreateSecretParams struct {
	Name     string
	Type     SecretType
	Metadata []byte
	Data     []byte
	Comment  *string
	UserID   int32
}

func (q *Queries) CreateSecret(ctx context.Context, arg CreateSecretParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createSecret,
		arg.Name,
		arg.Type,
		arg.Metadata,
		arg.Data,
		arg.Comment,
		arg.UserID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (login, password)
VALUES ($1, $2) RETURNING id
`

type CreateUserParams struct {
	Login    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Login, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteSecret = `-- name: DeleteSecret :exec
DELETE
FROM secrets
WHERE id = $1
`

func (q *Queries) DeleteSecret(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSecret, id)
	return err
}

const getSecret = `-- name: GetSecret :one
SELECT name, type, metadata, data, comment, created_at, updated_at, user_id
FROM secrets
WHERE id = $1 LIMIT 1
`

type GetSecretRow struct {
	Name      string
	Type      SecretType
	Metadata  []byte
	Data      []byte
	Comment   *string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    int32
}

func (q *Queries) GetSecret(ctx context.Context, id uuid.UUID) (GetSecretRow, error) {
	row := q.db.QueryRow(ctx, getSecret, id)
	var i GetSecretRow
	err := row.Scan(
		&i.Name,
		&i.Type,
		&i.Metadata,
		&i.Data,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getSecretForUpdate = `-- name: GetSecretForUpdate :one
SELECT name, type, metadata, data, comment, created_at, updated_at, user_id
FROM secrets
WHERE id = $1
LIMIT 1
FOR UPDATE
`

type GetSecretForUpdateRow struct {
	Name      string
	Type      SecretType
	Metadata  []byte
	Data      []byte
	Comment   *string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    int32
}

func (q *Queries) GetSecretForUpdate(ctx context.Context, id uuid.UUID) (GetSecretForUpdateRow, error) {
	row := q.db.QueryRow(ctx, getSecretForUpdate, id)
	var i GetSecretForUpdateRow
	err := row.Scan(
		&i.Name,
		&i.Type,
		&i.Metadata,
		&i.Data,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, password, created_at
FROM users
WHERE login = $1 LIMIT 1
`

type GetUserRow struct {
	ID        int32
	Password  string
	CreatedAt time.Time
}

func (q *Queries) GetUser(ctx context.Context, login string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, login)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Password, &i.CreatedAt)
	return i, err
}

const listSecrets = `-- name: ListSecrets :many
SELECT id, name, type, metadata, comment, created_at, updated_at
FROM secrets
WHERE user_id = $1
ORDER BY updated_at DESC
`

type ListSecretsRow struct {
	ID        uuid.UUID
	Name      string
	Type      SecretType
	Metadata  []byte
	Comment   *string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListSecrets(ctx context.Context, userID int32) ([]ListSecretsRow, error) {
	rows, err := q.db.Query(ctx, listSecrets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSecretsRow
	for rows.Next() {
		var i ListSecretsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Metadata,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSecret = `-- name: UpdateSecret :exec
UPDATE secrets
SET name = $2, type = $3, metadata = $4, data = $5, comment = $6, created_at = $7, updated_at = $8, user_id = $9
WHERE id = $1
`

type UpdateSecretParams struct {
	ID        uuid.UUID
	Name      string
	Type      SecretType
	Metadata  []byte
	Data      []byte
	Comment   *string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    int32
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) error {
	_, err := q.db.Exec(ctx, updateSecret,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Metadata,
		arg.Data,
		arg.Comment,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
	return err
}
