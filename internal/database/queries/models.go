// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package queries

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type SecretType string

const (
	SecretTypeUNSPECIFIED SecretType = "UNSPECIFIED"
	SecretTypeCREDENTIALS SecretType = "CREDENTIALS"
	SecretTypeTEXT        SecretType = "TEXT"
	SecretTypeBINARY      SecretType = "BINARY"
	SecretTypeCARD        SecretType = "CARD"
)

func (e *SecretType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SecretType(s)
	case string:
		*e = SecretType(s)
	default:
		return fmt.Errorf("unsupported scan type for SecretType: %T", src)
	}
	return nil
}

type NullSecretType struct {
	SecretType SecretType
	Valid      bool // Valid is true if SecretType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSecretType) Scan(value interface{}) error {
	if value == nil {
		ns.SecretType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SecretType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSecretType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SecretType), nil
}

type Secret struct {
	ID        uuid.UUID
	Name      string
	Type      SecretType
	Metadata  []byte
	Data      []byte
	Comment   *string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
}

type User struct {
	ID        uuid.UUID
	Login     string
	Password  string
	CreatedAt time.Time
}
